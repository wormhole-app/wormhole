// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';
import 'dart:ffi' as ffi;

class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
  NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_StringList> api2wire_StringList(List<String> raw) {
    final ans = inner.new_StringList_0(raw.length);
    for (var i = 0; i < raw.length; i++) {
      ans.ref.ptr[i] = api2wire_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_ServerConfig> api2wire_box_autoadd_server_config(
      ServerConfig raw) {
    final ptr = inner.new_box_autoadd_server_config_0();
    _api_fill_to_wire_server_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_server_config(
      ServerConfig apiObj, ffi.Pointer<wire_ServerConfig> wireObj) {
    _api_fill_to_wire_server_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_server_config(
      ServerConfig apiObj, wire_ServerConfig wireObj) {
    wireObj.rendezvous_url = api2wire_String(apiObj.rendezvousUrl);
    wireObj.transit_url = api2wire_String(apiObj.transitUrl);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_init(
    int port_,
    ffi.Pointer<wire_uint_8_list> temp_file_path,
  ) {
    return _wire_init(
      port_,
      temp_file_path,
    );
  }

  late final _wire_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_init');
  late final _wire_init = _wire_initPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_send_files(
    int port_,
    ffi.Pointer<wire_StringList> file_paths,
    ffi.Pointer<wire_uint_8_list> name,
    int code_length,
    ffi.Pointer<wire_ServerConfig> server_config,
  ) {
    return _wire_send_files(
      port_,
      file_paths,
      name,
      code_length,
      server_config,
    );
  }

  late final _wire_send_filesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_StringList>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint8,
              ffi.Pointer<wire_ServerConfig>)>>('wire_send_files');
  late final _wire_send_files = _wire_send_filesPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_StringList>,
          ffi.Pointer<wire_uint_8_list>,
          int,
          ffi.Pointer<wire_ServerConfig>)>();

  void wire_send_folder(
    int port_,
    ffi.Pointer<wire_uint_8_list> folder_path,
    ffi.Pointer<wire_uint_8_list> name,
    int code_length,
    ffi.Pointer<wire_ServerConfig> server_config,
  ) {
    return _wire_send_folder(
      port_,
      folder_path,
      name,
      code_length,
      server_config,
    );
  }

  late final _wire_send_folderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint8,
              ffi.Pointer<wire_ServerConfig>)>>('wire_send_folder');
  late final _wire_send_folder = _wire_send_folderPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          int,
          ffi.Pointer<wire_ServerConfig>)>();

  void wire_request_file(
    int port_,
    ffi.Pointer<wire_uint_8_list> passphrase,
    ffi.Pointer<wire_uint_8_list> storage_folder,
    ffi.Pointer<wire_ServerConfig> server_config,
  ) {
    return _wire_request_file(
      port_,
      passphrase,
      storage_folder,
      server_config,
    );
  }

  late final _wire_request_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_ServerConfig>)>>('wire_request_file');
  late final _wire_request_file = _wire_request_filePtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_ServerConfig>)>();

  void wire_get_passphrase_uri(
    int port_,
    ffi.Pointer<wire_uint_8_list> passphrase,
    ffi.Pointer<wire_uint_8_list> rendezvous_server,
  ) {
    return _wire_get_passphrase_uri(
      port_,
      passphrase,
      rendezvous_server,
    );
  }

  late final _wire_get_passphrase_uriPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_passphrase_uri');
  late final _wire_get_passphrase_uri = _wire_get_passphrase_uriPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_build_time(
    int port_,
  ) {
    return _wire_get_build_time(
      port_,
    );
  }

  late final _wire_get_build_timePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_build_time');
  late final _wire_get_build_time =
      _wire_get_build_timePtr.asFunction<void Function(int)>();

  void wire_default_rendezvous_url(
    int port_,
  ) {
    return _wire_default_rendezvous_url(
      port_,
    );
  }

  late final _wire_default_rendezvous_urlPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_default_rendezvous_url');
  late final _wire_default_rendezvous_url =
      _wire_default_rendezvous_urlPtr.asFunction<void Function(int)>();

  void wire_default_transit_url(
    int port_,
  ) {
    return _wire_default_transit_url(
      port_,
    );
  }

  late final _wire_default_transit_urlPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_default_transit_url');
  late final _wire_default_transit_url =
      _wire_default_transit_urlPtr.asFunction<void Function(int)>();

  ffi.Pointer<wire_StringList> new_StringList_0(
    int len,
  ) {
    return _new_StringList_0(
      len,
    );
  }

  late final _new_StringList_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_StringList> Function(ffi.Int32)>>(
      'new_StringList_0');
  late final _new_StringList_0 = _new_StringList_0Ptr
      .asFunction<ffi.Pointer<wire_StringList> Function(int)>();

  ffi.Pointer<wire_ServerConfig> new_box_autoadd_server_config_0() {
    return _new_box_autoadd_server_config_0();
  }

  late final _new_box_autoadd_server_config_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ServerConfig> Function()>>(
          'new_box_autoadd_server_config_0');
  late final _new_box_autoadd_server_config_0 =
      _new_box_autoadd_server_config_0Ptr
          .asFunction<ffi.Pointer<wire_ServerConfig> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>(
      'new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_StringList extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_uint_8_list>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_ServerConfig extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> rendezvous_url;

  external ffi.Pointer<wire_uint_8_list> transit_url;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>;
