// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../wormhole/types/build_info.dart';
import '../wormhole/types/error_types.dart';
import '../wormhole/types/events.dart';
import '../wormhole/types/t_update.dart';
import '../wormhole/types/value.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Export types for easier access
export '../wormhole/types/build_info.dart';
export '../wormhole/types/error_types.dart';
export '../wormhole/types/events.dart';
export '../wormhole/types/t_update.dart';
export '../wormhole/types/value.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `send`

Stream<LogEntry> setupLogStream() =>
    RustLib.instance.api.crateApiWormholeSetupLogStream();

/// initialize backend api
Future<void> init({required String tempFilePath}) =>
    RustLib.instance.api.crateApiWormholeInit(tempFilePath: tempFilePath);

Stream<TUpdate> sendFiles(
        {required List<String> filePaths,
        required String name,
        required int codeLength,
        required ServerConfig serverConfig}) =>
    RustLib.instance.api.crateApiWormholeSendFiles(
        filePaths: filePaths,
        name: name,
        codeLength: codeLength,
        serverConfig: serverConfig);

Stream<TUpdate> sendFolder(
        {required String folderPath,
        required String name,
        required int codeLength,
        required ServerConfig serverConfig}) =>
    RustLib.instance.api.crateApiWormholeSendFolder(
        folderPath: folderPath,
        name: name,
        codeLength: codeLength,
        serverConfig: serverConfig);

Stream<TUpdate> requestFile(
        {required String passphrase,
        required String storageFolder,
        required ServerConfig serverConfig}) =>
    RustLib.instance.api.crateApiWormholeRequestFile(
        passphrase: passphrase,
        storageFolder: storageFolder,
        serverConfig: serverConfig);

Future<String> getPassphraseUri(
        {required String passphrase, String? rendezvousServer}) =>
    RustLib.instance.api.crateApiWormholeGetPassphraseUri(
        passphrase: passphrase, rendezvousServer: rendezvousServer);

Future<BuildInfo> getBuildTime() =>
    RustLib.instance.api.crateApiWormholeGetBuildTime();

Future<String> defaultRendezvousUrl() =>
    RustLib.instance.api.crateApiWormholeDefaultRendezvousUrl();

Future<String> defaultTransitUrl() =>
    RustLib.instance.api.crateApiWormholeDefaultTransitUrl();

enum Level {
  error,
  warn,
  info,
  debug,
  trace,
  ;
}

class LogEntry {
  final PlatformInt64 timeMillis;
  final String msg;
  final Level logLevel;
  final String lbl;

  const LogEntry({
    required this.timeMillis,
    required this.msg,
    required this.logLevel,
    required this.lbl,
  });

  @override
  int get hashCode =>
      timeMillis.hashCode ^ msg.hashCode ^ logLevel.hashCode ^ lbl.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is LogEntry &&
          runtimeType == other.runtimeType &&
          timeMillis == other.timeMillis &&
          msg == other.msg &&
          logLevel == other.logLevel &&
          lbl == other.lbl;
}

class ServerConfig {
  final String rendezvousUrl;
  final String transitUrl;

  const ServerConfig({
    required this.rendezvousUrl,
    required this.transitUrl,
  });

  @override
  int get hashCode => rendezvousUrl.hashCode ^ transitUrl.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ServerConfig &&
          runtimeType == other.runtimeType &&
          rendezvousUrl == other.rendezvousUrl &&
          transitUrl == other.transitUrl;
}
