// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/wormhole.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'wormhole/types/build_info.dart';
import 'wormhole/types/error_types.dart';
import 'wormhole/types/events.dart';
import 'wormhole/types/t_update.dart';
import 'wormhole/types/value.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => 968120258;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_wormhole',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<String> crateApiWormholeDefaultRendezvousUrl();

  Future<String> crateApiWormholeDefaultTransitUrl();

  Future<BuildInfo> crateApiWormholeGetBuildTime();

  Future<String> crateApiWormholeGetPassphraseUri(
      {required String passphrase, String? rendezvousServer});

  Future<void> crateApiWormholeInit({required String tempFilePath});

  Stream<TUpdate> crateApiWormholeRequestFile(
      {required String passphrase,
      required String storageFolder,
      required ServerConfig serverConfig});

  Stream<TUpdate> crateApiWormholeSendFiles(
      {required List<String> filePaths,
      required String name,
      required int codeLength,
      required ServerConfig serverConfig});

  Stream<TUpdate> crateApiWormholeSendFolder(
      {required String folderPath,
      required String name,
      required int codeLength,
      required ServerConfig serverConfig});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<String> crateApiWormholeDefaultRendezvousUrl() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWormholeDefaultRendezvousUrlConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWormholeDefaultRendezvousUrlConstMeta =>
      const TaskConstMeta(
        debugName: 'default_rendezvous_url',
        argNames: [],
      );

  @override
  Future<String> crateApiWormholeDefaultTransitUrl() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWormholeDefaultTransitUrlConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWormholeDefaultTransitUrlConstMeta =>
      const TaskConstMeta(
        debugName: 'default_transit_url',
        argNames: [],
      );

  @override
  Future<BuildInfo> crateApiWormholeGetBuildTime() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_build_info,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWormholeGetBuildTimeConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWormholeGetBuildTimeConstMeta =>
      const TaskConstMeta(
        debugName: 'get_build_time',
        argNames: [],
      );

  @override
  Future<String> crateApiWormholeGetPassphraseUri(
      {required String passphrase, String? rendezvousServer}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(passphrase, serializer);
        sse_encode_opt_String(rendezvousServer, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWormholeGetPassphraseUriConstMeta,
      argValues: [passphrase, rendezvousServer],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWormholeGetPassphraseUriConstMeta =>
      const TaskConstMeta(
        debugName: 'get_passphrase_uri',
        argNames: ['passphrase', 'rendezvousServer'],
      );

  @override
  Future<void> crateApiWormholeInit({required String tempFilePath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(tempFilePath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWormholeInitConstMeta,
      argValues: [tempFilePath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWormholeInitConstMeta => const TaskConstMeta(
        debugName: 'init',
        argNames: ['tempFilePath'],
      );

  @override
  Stream<TUpdate> crateApiWormholeRequestFile(
      {required String passphrase,
      required String storageFolder,
      required ServerConfig serverConfig}) {
    final actions = RustStreamSink<TUpdate>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(passphrase, serializer);
        sse_encode_String(storageFolder, serializer);
        sse_encode_box_autoadd_server_config(serverConfig, serializer);
        sse_encode_StreamSink_t_update_Sse(actions, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWormholeRequestFileConstMeta,
      argValues: [passphrase, storageFolder, serverConfig, actions],
      apiImpl: this,
    )));
    return actions.stream;
  }

  TaskConstMeta get kCrateApiWormholeRequestFileConstMeta =>
      const TaskConstMeta(
        debugName: 'request_file',
        argNames: ['passphrase', 'storageFolder', 'serverConfig', 'actions'],
      );

  @override
  Stream<TUpdate> crateApiWormholeSendFiles(
      {required List<String> filePaths,
      required String name,
      required int codeLength,
      required ServerConfig serverConfig}) {
    final actions = RustStreamSink<TUpdate>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(filePaths, serializer);
        sse_encode_String(name, serializer);
        sse_encode_u_8(codeLength, serializer);
        sse_encode_box_autoadd_server_config(serverConfig, serializer);
        sse_encode_StreamSink_t_update_Sse(actions, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWormholeSendFilesConstMeta,
      argValues: [filePaths, name, codeLength, serverConfig, actions],
      apiImpl: this,
    )));
    return actions.stream;
  }

  TaskConstMeta get kCrateApiWormholeSendFilesConstMeta => const TaskConstMeta(
        debugName: 'send_files',
        argNames: [
          'filePaths',
          'name',
          'codeLength',
          'serverConfig',
          'actions'
        ],
      );

  @override
  Stream<TUpdate> crateApiWormholeSendFolder(
      {required String folderPath,
      required String name,
      required int codeLength,
      required ServerConfig serverConfig}) {
    final actions = RustStreamSink<TUpdate>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(folderPath, serializer);
        sse_encode_String(name, serializer);
        sse_encode_u_8(codeLength, serializer);
        sse_encode_box_autoadd_server_config(serverConfig, serializer);
        sse_encode_StreamSink_t_update_Sse(actions, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWormholeSendFolderConstMeta,
      argValues: [folderPath, name, codeLength, serverConfig, actions],
      apiImpl: this,
    )));
    return actions.stream;
  }

  TaskConstMeta get kCrateApiWormholeSendFolderConstMeta => const TaskConstMeta(
        debugName: 'send_folder',
        argNames: [
          'folderPath',
          'name',
          'codeLength',
          'serverConfig',
          'actions'
        ],
      );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  RustStreamSink<TUpdate> dco_decode_StreamSink_t_update_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  ServerConfig dco_decode_box_autoadd_server_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_server_config(raw);
  }

  @protected
  BuildInfo dco_decode_build_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return BuildInfo(
      buildTime: dco_decode_u_64(arr[0]),
      devBuild: dco_decode_bool(arr[1]),
      version: dco_decode_String(arr[2]),
    );
  }

  @protected
  ConnectionType dco_decode_connection_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConnectionType.values[raw as int];
  }

  @protected
  ErrorType dco_decode_error_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ErrorType.values[raw as int];
  }

  @protected
  Events dco_decode_events(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Events.values[raw as int];
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  ServerConfig dco_decode_server_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ServerConfig(
      rendezvousUrl: dco_decode_String(arr[0]),
      transitUrl: dco_decode_String(arr[1]),
    );
  }

  @protected
  TUpdate dco_decode_t_update(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TUpdate(
      event: dco_decode_events(arr[0]),
      value: dco_decode_value(arr[1]),
    );
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  Value dco_decode_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Value_Int(
          dco_decode_i_32(raw[1]),
        );
      case 1:
        return Value_String(
          dco_decode_String(raw[1]),
        );
      case 2:
        return Value_ErrorValue(
          dco_decode_error_type(raw[1]),
          dco_decode_String(raw[2]),
        );
      case 3:
        return Value_Error(
          dco_decode_error_type(raw[1]),
        );
      case 4:
        return Value_ConnectionType(
          dco_decode_connection_type(raw[1]),
          dco_decode_String(raw[2]),
        );
      default:
        throw Exception('unreachable');
    }
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  RustStreamSink<TUpdate> sse_decode_StreamSink_t_update_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  ServerConfig sse_decode_box_autoadd_server_config(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_server_config(deserializer));
  }

  @protected
  BuildInfo sse_decode_build_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_buildTime = sse_decode_u_64(deserializer);
    var var_devBuild = sse_decode_bool(deserializer);
    var var_version = sse_decode_String(deserializer);
    return BuildInfo(
        buildTime: var_buildTime, devBuild: var_devBuild, version: var_version);
  }

  @protected
  ConnectionType sse_decode_connection_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return ConnectionType.values[inner];
  }

  @protected
  ErrorType sse_decode_error_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return ErrorType.values[inner];
  }

  @protected
  Events sse_decode_events(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Events.values[inner];
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ServerConfig sse_decode_server_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_rendezvousUrl = sse_decode_String(deserializer);
    var var_transitUrl = sse_decode_String(deserializer);
    return ServerConfig(
        rendezvousUrl: var_rendezvousUrl, transitUrl: var_transitUrl);
  }

  @protected
  TUpdate sse_decode_t_update(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_event = sse_decode_events(deserializer);
    var var_value = sse_decode_value(deserializer);
    return TUpdate(event: var_event, value: var_value);
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  Value sse_decode_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_i_32(deserializer);
        return Value_Int(var_field0);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return Value_String(var_field0);
      case 2:
        var var_field0 = sse_decode_error_type(deserializer);
        var var_field1 = sse_decode_String(deserializer);
        return Value_ErrorValue(var_field0, var_field1);
      case 3:
        var var_field0 = sse_decode_error_type(deserializer);
        return Value_Error(var_field0);
      case 4:
        var var_field0 = sse_decode_connection_type(deserializer);
        var var_field1 = sse_decode_String(deserializer);
        return Value_ConnectionType(var_field0, var_field1);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_StreamSink_t_update_Sse(
      RustStreamSink<TUpdate> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_t_update,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_server_config(
      ServerConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_server_config(self, serializer);
  }

  @protected
  void sse_encode_build_info(BuildInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.buildTime, serializer);
    sse_encode_bool(self.devBuild, serializer);
    sse_encode_String(self.version, serializer);
  }

  @protected
  void sse_encode_connection_type(
      ConnectionType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_error_type(ErrorType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_events(Events self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_server_config(ServerConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.rendezvousUrl, serializer);
    sse_encode_String(self.transitUrl, serializer);
  }

  @protected
  void sse_encode_t_update(TUpdate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_events(self.event, serializer);
    sse_encode_value(self.value, serializer);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_value(Value self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Value_Int(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_i_32(field0, serializer);
      case Value_String(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
      case Value_ErrorValue(field0: final field0, field1: final field1):
        sse_encode_i_32(2, serializer);
        sse_encode_error_type(field0, serializer);
        sse_encode_String(field1, serializer);
      case Value_Error(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_error_type(field0, serializer);
      case Value_ConnectionType(field0: final field0, field1: final field1):
        sse_encode_i_32(4, serializer);
        sse_encode_connection_type(field0, serializer);
        sse_encode_String(field1, serializer);
    }
  }
}
