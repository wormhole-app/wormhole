name: build

on:
  workflow_call:
    inputs:
      release:
        description: 'Version tag'
        type: boolean
        required: true


jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v5
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: 3.35.5
      - name: Deps
        run: |
          flutter pub get
          flutter gen-l10n
      - name: Build Windows
        run: |
          flutter build windows --verbose
      - name: Zip Windows Release
        run: |
          Compress-Archive -Path ./build/windows/x64/runner/Release/* -DestinationPath ./wormhole.zip -Force
      # If release, this should create an MSIX installer (once we have a proper cert)
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: ./wormhole.zip

  build-macos:
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v5
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: 3.35.5
      - name: Deps
        run: |
          flutter pub get
          flutter gen-l10n
      - name: Build macOS
        run: flutter build macos
      - name: Install dmg dependencies
        run: |
          pip install dmgbuild
      - name: Setup code signing certificate
        if: ${{ inputs.release }}
        run: |
          # Create temporary keychain
          security create-keychain -p temporary_ci_password build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p temporary_ci_password build.keychain
          security set-keychain-settings -t 3600 -u build.keychain

          # Decode and import certificate
          echo "${{ secrets.MACOS_CERTIFICATE_BASE64 }}" | base64 --decode > certificate.p12
          ls -lh certificate.p12
          security import certificate.p12 -k build.keychain -P "${{ secrets.MACOS_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign -T /usr/bin/productsign
          echo "Imported certificates"
          security set-key-partition-list -S apple-tool:,apple: -s -k temporary_ci_password build.keychain

          # Clean up certificate file
          rm -f certificate.p12
      - name: Setup notary profile for notarization
        if: ${{ inputs.release }}
        run: |
          # Store notarization credentials for dmg package to use
          xcrun notarytool store-credentials "NotaryProfile" \
            --apple-id "${{ secrets.APPLE_ID }}" \
            --password "${{ secrets.APPLE_PASSWORD }}" \
            --team-id "${{ secrets.APPLE_TEAM_ID }}"
      - name: Create unsigned DMG
        if: ${{ !inputs.release }}
        run: |
          dart run dmg --no-sign
      - name: Create signed DMG (with automatic notarization and stapling)
        if: ${{ inputs.release }}
        # The dmg package will automatically: sign the app, create DMG, sign DMG, notarize, and staple
        run: |
          dart run dmg --sign-certificate "Developer ID Application: Emma Sabatschus (Y647R6B9S3)"
      - name: Cleanup keychain
        if: ${{ always() && inputs.release }}
        run: |
          security delete-keychain build.keychain || true
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos
          path: ./build/macos/Build/Products/Release/wormhole.dmg

  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v5
      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: 3.35.5
      - name: Deps
        run: |
          rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android
          cargo install cargo-ndk
          flutter pub get
          flutter gen-l10n
      - name: Build Android APK
        run: flutter build apk --release
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: ./build/app/outputs/flutter-apk/app-release.apk
      - name: Setup Ruby
        if: ${{ inputs.release }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler-cache: true
          working-directory: android
      - name: Install fastlane
        if: ${{ inputs.release }}
        run: |
          cd android
          gem install fastlane
      - name: Prepare Fastlane service account key
        if: ${{ inputs.release }}
        run: |
          echo "$ANDROID_FASTLANE_KEY" > android/fastlane-key.json
        env:
          ANDROID_FASTLANE_KEY: ${{ secrets.ANDROID_FASTLANE_KEY }}
      - name: Run fastlane to build Android App Bundle
        if: ${{ inputs.release }}
        run: |
          cd android
          flutter build appbundle --release
          fastlane deploy

  build-linux:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v5
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: 3.35.5
      - name: Deps
        run: |
          sudo apt-get update -y && sudo apt-get upgrade -y
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev libstdc++-12-dev
          flutter pub get
          flutter gen-l10n
      - name: Build Linux
        run: flutter build linux --release
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux
          path: ./build/linux/x64/release/bundle

  build-ios:
    runs-on: macos-26
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v5
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: 3.35.5
      - name: Deps
        run: |
          flutter pub get
          flutter gen-l10n
      - name: Install CocoaPods dependencies
        run: |
          cd ios
          pod install
      - name: Build iOS
        if: ${{ !inputs.release }}
        run: flutter build ios --release --no-codesign
      - name: Setup Ruby
        if: ${{ inputs.release }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler-cache: true
          working-directory: ios
      - name: Install fastlane dependencies
        if: ${{ inputs.release }}
        run: |
          cd ios
          bundle install
      - name: Setup temporary keychain
        if: ${{ inputs.release }}
        run: |
          security create-keychain -p temporary_ci_password fastlane_tmp_keychain.keychain
          security default-keychain -s fastlane_tmp_keychain.keychain
          security unlock-keychain -p temporary_ci_password fastlane_tmp_keychain.keychain
          security set-keychain-settings -t 3600 -u fastlane_tmp_keychain.keychain
      - name: Build and upload to TestFlight
        if: ${{ inputs.release }}
        run: |
          cd ios
          bundle exec fastlane alpha
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
          MATCH_KEYCHAIN_NAME: fastlane_tmp_keychain
          MATCH_KEYCHAIN_PASSWORD: temporary_ci_password
